# Урок 3 Задача 5. В массиве найти максимальный отрицательный элемент. Вывести на экран его значение и
# позицию в массиве. Примечание к задаче: пожалуйста не путайте «минимальный» и «максимальный отрицательный».
# Это два абсолютно разных значения.

import cProfile

array = [-751, 685, -484, -789, 66, -798, 354, -642, 1, -630, 984, -351, -227, -305, -69, -436, 677, 871, 130,
         -802, 962, -551, 59, 477, -833, -403, 367, -385, 885, 734, -261, 509, 112, -935, -804, 5, 367, 145, 547,
         -539, 489, -592, 88, -51, 458, 966, 241, -782, 323, 840, 919, 649, -842, 434, -997, -138, -199, 112, 187,
         847, 179, -885, -967, -853, -71, -943, -946, -897, -571, 4, -739, 213, 975, -27, -93, 988, 412, 732, -341,
         -160, -227, -546, -597, -428, 162, -852, -575, 326, 73, 531, 737, -638, 877, -25, -147, 105, 977, -104,
         76, 259, -751, 685, -484, -789, 66, -798, 354, -642, 1, -630, 984, -351, -227, -305, -69, -436, 677, 871, 130,
         -802, 962, -551, 59, 477, -833, -403, 367, -385, 885, 734, -261, 509, 112, -935, -804, 5, 367, 145, 547,
         -539, 489, -592, 88, -51, 458, 966, 241, -782, 323, 840, 919, 649, -842, 434, -997, -138, -199, 112, 187,
         847, 179, -885, -967, -853, -71, -943, -946, -897, -571, 4, -739, 213, 975, -27, -93, 988, 412, 732, -341,
         -160, -227, -546, -597, -428, 162, -852, -575, 326, 73, 531, 737, -638, 877, -25, -147, 105, 977, -104,
         76, 259, -751, 685, -484, -789, 66, -798, 354, -642, 1, -630, 984, -351, -227, -305, -69, -436, 677, 871, 130,
         -802, 962, -551, 59, 477, -833, -403, 367, -385, 885, 734, -261, 509, 112, -935, -804, 5, 367, 145, 547,
         -539, 489, -592, 88, -51, 458, 966, 241, -782, 323, 840, 919, 649, -842, 434, -997, -138, -199, 112, 187,
         847, 179, -885, -967, -853, -71, -943, -946, -897, -571, 4, -739, 213, 975, -27, -93, 988, 412, 732, -341,
         -160, -227, -546, -597, -428, 162, -852, -575, 326, 73, 531, 737, -638, 877, -25, -147, 105, 977, -104,
         76, 259, -751, 685, -484, -789, 66, -798, 354, -642, 1, -630, 984, -351, -227, -305, -69, -436, 677, 871, 130,
         -802, 962, -551, 59, 477, -833, -403, 367, -385, 885, 734, -261, 509, 112, -935, -804, 5, 367, 145, 547,
         -539, 489, -592, 88, -51, 458, 966, 241, -782, 323, 840, 919, 649, -842, 434, -997, -138, -199, 112, 187,
         847, 179, -885, -967, -853, -71, -943, -946, -897, -571, 4, -739, 213, 975, -27, -93, 988, 412, 732, -341,
         -160, -227, -546, -597, -428, 162, -852, -575, 326, 73, 531, 737, -638, 877, -25, -147, 105, 977, -104,
         76, 259, -751, 685, -484, -789, 66, -798, 354, -642, 1, -630, 984, -351, -227, -305, -69, -436, 677, 871, 130,
         -802, 962, -551, 59, 477, -833, -403, 367, -385, 885, 734, -261, 509, 112, -935, -804, 5, 367, 145, 547,
         -539, 489, -592, 88, -51, 458, 966, 241, -782, 323, 840, 919, 649, -842, 434, -997, -138, -199, 112, 187,
         847, 179, -885, -967, -853, -71, -943, -946, -897, -571, 4, -739, 213, 975, -27, -93, 988, 412, 732, -341,
         -160, -227, -546, -597, -428, 162, -852, -575, 326, 73, 531, 737, -638, 877, -25, -147, 105, 977, -104,
         76, 259]


def find_max_neg1(n):
    i = 0
    index = -1
    while i < n:
        if array[i] < 0 and index == -1:
            index = i
        elif 0 > array[i] > array[index]:
            index = i
        i += 1
    return index

# cProfile.run('find_max_neg1(100)')
# 4 function calls in 0.000 seconds
# 1    0.000    0.000    0.000    0.000 <string>:1(<module>)
# 1    0.000    0.000    0.000    0.000 task_1.py:35(find_max_neg1)
# 1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
# 1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

# task_1.find_max_neg1(500)
# 1000 loops, best of 5: 159 usec per loop

# task_1.find_max_neg1(100)
# 1000 loops, best of 5: 29.9 usec per loop

# task_1.find_max_neg1(50)
# 1000 loops, best of 5: 15.1 usec per loop

# task_1.find_max_neg1(15)
# 1000 loops, best of 5: 5.09 usec per loop


def find_max_neg2(n):
    num = float('-inf')
    index = -1

    for i, item in enumerate(array[:n]):
        if 0 > item > num:
            num = item
            index = i
    return index

# cProfile.run('find_max_neg2(100)')
# 4 function calls in 0.000 seconds
# 1    0.000    0.000    0.000    0.000 <string>:1(<module>)
# 1    0.000    0.000    0.000    0.000 task_1.py:66(find_max_neg2)
# 1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
# 1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

# task_1.find_max_neg2(500)
# 1000 loops, best of 5: 58.9 usec per loop

# task_1.find_max_neg2(100)
# 1000 loops, best of 5: 13.2 usec per loop

# task_1.find_max_neg2(50)
# 1000 loops, best of 5: 6.77 usec per loop

# task_1.find_max_neg2(15)
# 1000 loops, best of 5: 3.13 usec per loop


def find_max_neg3(n):
    spam = array[:n]
    spam.sort()

    for i, item in enumerate(spam):
        if i >= len(spam) - 1 and item >= 0:
            print('В массиве нет отрицательных чисел')
            break
        if item < 0 and spam[i + 1] > 0:
            break
    return array.index(item, 0, n)

# cProfile.run('find_max_neg3(100)')
# 56 function calls in 0.000 seconds
# 1    0.000    0.000    0.000    0.000 <string>:1(<module>)
#         1    0.000    0.000    0.000    0.000 task_1.py:96(find_max_neg3)
#         1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
#        50    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#         1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
#         1    0.000    0.000    0.000    0.000 {method 'index' of 'list' objects}
#         1    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}

# task_1.find_max_neg3(500)
# 1000 loops, best of 5: 133 usec per loop

# task_1.find_max_neg3(100)
# 1000 loops, best of 5: 26.2 usec per loop

# task_1.find_max_neg3(50)
# 1000 loops, best of 5: 13.4 usec per loop

# task_1.find_max_neg3(15)
# 1000 loops, best of 5: 6.81 usec per loop


def test_find_max_neg(func):
    assert func(13) == 12
    print(f'Test A OK')
    assert func(15) == 14
    print(f'Test B OK')
    assert func(100) == 93
    print(f'Test C OK')


# test_find_max_neg(find_max_neg1)
# test_find_max_neg(find_max_neg2)
# test_find_max_neg(find_max_neg3)
# cProfile.run('find_max_neg3(100)')

# Длину массива задаем путем изменения переменной n, от этого зависит размер среза
# Все 3 варианта имеют сложность O(n)
# Вывод: варианты 1 и 3 показывают почти одинаковые результаты по времени, несмотря на то, что в 3-ем варианте
# относительно много раз вызываются вспомогательные функции. По сравнению с ними 2-ой вариант работает почти в
# 2 раза быстрее. Вероятно цикл for работает немного быстрее
