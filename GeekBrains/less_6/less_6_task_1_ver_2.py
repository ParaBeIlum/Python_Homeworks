# 1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех
# уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти. Примечание:
# По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:
# a. выбрать хорошую задачу, которую имеет смысл оценивать по памяти;
# b. написать 3 варианта кода (один у вас уже есть); проанализировать 3 варианта и выбрать оптимальный;
# c. результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с
# кодом. Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;
# d. написать общий вывод: какой из трёх вариантов лучше и почему.
#
# less_3_task_4:
# Определить, какое число в массиве встречается чаще всего.

from myfuncs import memory_counter
import random

size = 9999
array = [random.randint(0, 9999) for _ in range(size)]

num = array[0]
max_frq = 1

for i in range(size - 1):
    frq = 1
    for k in range(i + 1, size):
        if array[i] == array[k]:
            frq += 1
    if frq > max_frq:
        max_frq = frq
        num = array[i]
if max_frq > 1:
    print(f'Число {num} встречается {max_frq} раз(а)')
else:
    print('Все элементы уникальны')

res = 0
lst = list(locals().values())
ids = set()
for i in lst:
    res += memory_counter(i, ids)
print('*' * 40)
print(f'Размер памяти, занимаемый переменными = {res} байт')


# print(sys.version, sys.platform)
# 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)] win32
#
# В данном варианте решения не учитывается случай одинакового количества повторений, памяти используется меньше,
# почти в 2 раза. Правда при больших значениях массива скорость подсчета очень страдает
# При входных данных:
# size = 9999
# array = [random.randint(0, 9999) for _ in range(size)]
#
# Примерный размер памяти, занимаемый переменными = 365581 байт
